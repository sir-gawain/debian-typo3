Description: Upstream changes introduced in version 4.5.0+dfsg1~beta2-1
 This patch has been created by dpkg-source during the package build.
 Here's the last changelog entry, hopefully it gives details on why
 those changes were made:
 .
 typo3-src (4.5.0+dfsg1~beta2-1) experimental; urgency=low
 .
   * New upstream release.
   * Added source for player.swf and flvplayer.swf (see #591969).
 .
 The person named in the Author field signed this changelog entry.
Author: Christian Welzel <gawain@camlann.de>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- /dev/null
+++ typo3-src-4.5.0+dfsg1~beta2/typo3/contrib/flashmedia/src/flvplayer.as
@@ -0,0 +1,424 @@
+ï»¿//--------------------------------------------------------------------------
+// initial variables that might be useful to change
+//--------------------------------------------------------------------------
+
+// Stage variables
+
+Stage.scaleMode = "noScale";
+Stage.align = "TL";
+
+// Add link to rightclick menu
+
+var newMenu:ContextMenu = new ContextMenu();
+newMenu.hideBuiltInItems();
+newMenu.customItems.push(new ContextMenuItem("TYPO3 Media Player...",goTo));
+this.menu = newMenu;
+function goTo() { getURL("http://typo3.org"); };
+
+//_root.allowFullScreen = "true";
+var screenMode:String = 'normal';
+
+function fullScreen()
+{
+	if(screenMode == 'normal')
+	{
+      Stage["displayState"] = "fullScreen";
+	  screenMode = 'full';
+	}
+	else
+	{
+		Stage["displayState"] = "normal";
+		screenMode = 'normal';
+	}
+}
+
+var stageSize:Object = new Object();
+stageSize.onResize = function() 
+{
+    w = Stage.width;
+ h = Stage.height;
+ setDims(w,h);                                
+}
+Stage.addListener(stageSize);
+
+
+if(_root.previewSeek == 'true')
+{
+ makePre = true;
+}
+else
+{
+ makePre = false;
+}
+
+
+// toggle for which file to play if none was set in html
+// you can change the 'test.flv' in your filename
+if(!_root.file) {
+	file = "video.flv";
+} else {
+	file = _root.file;
+}
+
+// toggle for autostarting the video
+// you can change the 'true' in 'false'
+if(_root.autoPlay == "true") {
+	autoStart = true;
+} else {
+	autoStart = false;
+}
+
+if(!_root.smoothing) {
+	smoothing = true;
+} else {
+	smoothing = _root.smoothing;
+}
+if(!_root.deblocking) {
+	deblocking = 5;
+} else {
+	deblocking = _root.deblocking;
+}
+if(!_root.volume) {
+	volume = 80;
+} else {
+	volume = _root.volume;
+}
+if(!_root.prebuffer) {
+	prebuffer = 5;
+} else {
+	prebuffer = _root.prebuffer;
+}
+if(!_root.preview || _root.preview == "true") {
+	preview = true;
+}
+if(!_root.previewSeek) {
+	previewSeek = 0.1
+} else {
+	previewSeek = _root.previewSeek
+}
+
+if (!_root.clickAlpha) {
+	clickAlpha = 65;
+} else {
+	clickAlpha = _root.clickAlpha;
+}
+
+if (!_root.clickText) {
+	clickText = "";
+} else {
+	clickText = _root.clickText;
+}
+
+// toggle for the width and height of the video
+// you can change them to the width and height you want
+w = Stage.width;
+h = Stage.height;
+
+//--------------------------------------------------------------------------
+// stream setup and functions
+//--------------------------------------------------------------------------
+
+// create and set netstream
+nc = new NetConnection();
+nc.connect(null);
+ns = new NetStream(nc);
+ns.setBufferTime(2);
+
+// create and set sound object
+this.createEmptyMovieClip("snd", 0);
+snd.attachAudio(ns);
+audio = new Sound(snd);
+
+//attach videodisplay
+videoDisplay.attachVideo(ns);
+
+// Retrieve duration meta data from netstream
+ns.onMetaData = function(obj) {
+	this.totalTime = obj.duration;
+	// these three lines were used for automatically sizing
+	// it is now done by sizing the video to stage dimensions
+	// if(obj.height > 0 && obj.height < Stage.height-20) {
+	// setDims(obj.width, obj.height);
+	// }
+};
+
+// retrieve status messages from netstream
+ns.onStatus = function(object) { 
+	if(object.code == "NetStream.Play.Stop") {
+		// rewind and pause on when movie is finished
+		ns.seek(0);
+		if(_root.repeat == "true") {
+			return;
+		}
+		if(preview) {
+			ns.seek(previewSeek);
+		}
+		ns.pause();
+		playBut._visible = true;
+		pauseBut._visible = false;
+		if (!preview) {
+			videoDisplay._visible = false;
+		}
+		showClick(true);
+	}
+	if (info.code == "NetStream.Buffer.Full") {
+    	if(makePre) {
+			ns.seek(previewSeek);
+			makePre = false;
+    }
+   }
+};
+
+
+//--------------------------------------------------------------------------
+// controlbar functionality
+//--------------------------------------------------------------------------
+
+function showClick(show) {
+	if (show) {
+		if (_root.click) {
+			if (!alignedClick) {
+				clickImage.loadMovie(_root.click);
+				clickImage._alpha = clickAlpha;
+			}
+			clickImage._visible = true;
+		} else {
+			playText.text = clickText;
+		}
+	} else {
+		if (playText.text.length) {
+			playText.text = "";
+		}
+		if (clickImage._visible) {
+			clickImage._visible = false;
+		}
+	}
+}
+
+// play the movie and hide playbutton
+function playMovie() {
+	if(!isStarted) {
+		audio.setVolume(volume);
+		ns.setBufferTime(prebuffer);
+		ns.play(file);
+		isStarted = true;
+	} else {
+		showClick(false);
+		ns.pause();
+	}
+	pauseBut._visible = true;
+	playBut._visible = false;
+	videoDisplay._visible = true;
+}
+
+// pause the movie and hide pausebutton
+function pauseMovie() {
+	ns.pause();
+	playBut._visible = true;
+	pauseBut._visible = false;
+};
+
+// video click action
+videoBg.onPress = function() {
+	if(pauseBut._visible == false) {
+		playMovie();
+	} else {
+		pauseMovie();
+	}
+};
+
+// pause button action
+pauseBut.onPress = function() {
+	pauseMovie();
+};
+
+// play button action
+playBut.onPress = function() {
+	playMovie();
+};
+
+// file load progress
+progressBar.onEnterFrame = function() {
+	if (isStarted) {
+		loaded = this._parent.ns.bytesLoaded;
+		total = this._parent.ns.bytesTotal;
+		if (loaded == total && loaded > 1000) {
+			this.loa._xscale = 100;
+			delete this.onEnterFrame;
+		} else {
+			this.loa._xscale = int(loaded/total*100);
+		}
+	}
+};
+
+// play progress function
+progressBar.tme.onEnterFrame = function() {
+	if (isStarted) {
+		this._xscale = ns.time/ns.totalTime*100;
+
+		if (bufferPercent != -1) {
+			if (!bufferPercent) {
+				showClick(false);
+			}
+			bufferPercent = int(ns.bufferLength/ns.bufferTime*100);
+			if (bufferPercent >= 100) {
+				playText.text = "";
+				bufferPercent = -1;
+			} else {
+				playText.text = "buffering .. " + bufferPercent + "%";
+			}
+		}
+	} else if (inPreview && ns.time > 0) {
+		ns.close();
+		inPreview = false;
+	}
+
+	if (clickImage._width && !alignedClick) {
+		clickImage._x = (videoDisplay._width - clickImage._width) / 2;
+		clickImage._y = (videoDisplay._height - clickImage._height) / 2;
+		alignedClick = true;
+	}
+};
+
+// start playhead scrubbing
+progressBar.loa.onPress = function() {
+	this.onEnterFrame = function() {
+		scl = (this._xmouse/this._width)*(this._xscale/100)*(this._xscale/100);
+		if(scl < 0.02) { scl = 0; }
+		ns.seek(scl*ns.totalTime);
+		if (isStarted) {
+			showClick(false);
+		}
+	};
+};
+
+// stop playhead scrubbing
+progressBar.loa.onRelease = progressBar.loa.onReleaseOutside = function () { 
+	delete this.onEnterFrame;
+	pauseBut._visible == false ? videoDisplay.pause() : null;
+};
+
+
+// fullscreen
+if(_root.allowFullScreen == "true") {
+	FSBut.onPress = function() {
+		fullScreen();
+	};
+} else if (_root.fs == "true") {
+	FSBut.onPress = function() {
+		getURL("javascript: history.go(-1)");
+	};
+}
+
+
+
+// volume scrubbing
+volumeBar.back.onPress = function() {
+	this.onEnterFrame = function() {
+		var xm = this._xmouse;
+		if(xm>=0 && xm <= 20) {
+			this._parent.mask._width = this._xmouse;
+			this._parent._parent.audio.setVolume(this._xmouse*5);
+		}
+	};
+}
+volumeBar.back.onRelease = volumeBar.back.onReleaseOutside = function() {
+	delete this.onEnterFrame;
+}
+
+volumeBar.icn.onPress = function() {
+	if (volumeBar.mute._visible) {
+		setVolume(volume);
+	} else {
+		volume = audio.getVolume();
+		setVolume(0);
+	}
+}
+
+function setVolume(vol) {
+	audio.setVolume(vol);
+	volumeBar.mask._width = vol/5;
+	if (vol > 0 && volumeBar.mute._visible) {
+		volumeBar.mute._visible = false;
+	} else if (!vol && !volumeBar.mute._visible) {
+		volumeBar.mute._visible = true;
+	}
+}
+
+setVolume(volume);
+
+
+//--------------------------------------------------------------------------
+// resize and position all items
+//--------------------------------------------------------------------------
+function setDims(w,h) {
+	// set videodisplay dimensions
+	videoDisplay._width = videoBg._width = w;
+	videoDisplay._height = videoBg._height = h-20;
+	playText1._x = w/2-120;
+	playText1._y = h/2-20;
+	playText2._x = playText1._x + 1;
+	playText2._y = playText1._y + 1;
+		
+	// resize the controlbar items .. 
+	if(_root.fs == "true") {
+		colorBar._y = playBut._y = pauseBut._y = progressBar._y = FSBut._y = volumeBar._y = h-30; 
+		playBut._x = pauseBut._x = colorBar._x = w/2-150;
+		colorBar._width = 300;
+		colorBar._alpha = 25;
+		progressBar._x = w/2-133;
+		progressBar._width = 228;
+		FSBut._x = w/2+95;
+		volumeBar._x = w/2+112;
+		videoDisplay._height = h;
+	} else {
+		colorBar._y = playBut._y = pauseBut._y = progressBar._y = FSBut._y = volumeBar._y = h-18;
+		progressBar._width = w-56;
+		colorBar._width = w;
+		volumeBar._x = w-38;
+		if(_root.allowFullScreen == "true") { 
+			FSBut._visible = true;
+			progressBar._width -=17;
+			FSBut._x = w-55;
+		} else {
+			FSBut._visible = false;
+		}
+	}
+}
+
+// here you can ovverride the dimensions of the video
+setDims(w,h);
+
+
+//--------------------------------------------------------------------------
+// all done ? start the movie !
+//--------------------------------------------------------------------------
+
+// start playing the movie
+// if no autoStart it searches for a placeholder jpg
+// and hides the pauseBut
+
+pauseBut._visible = false;
+videoDisplay.smoothing = smoothing;
+videoDisplay.deblocking = deblocking;
+if (autoStart == true) {
+	playMovie();
+} else {
+	showClick(true);
+	if (preview) {
+		inPreview = true;
+		audio.setVolume(0);
+		ns.play(file);
+		ns.seek(previewSeek);
+	} else {
+		if(_root.image) { 
+			imageStr = _root.image;
+		} else {
+			imageStr = file.substring(0,file.length-3)+"jpg";
+			if (imageStr.substring(0,2) == "..") {
+				imageStr = imageStr.substring(3);
+			}
+		}
+		imageClip.loadMovie(imageStr);
+	}
+}
--- /dev/null
+++ typo3-src-4.5.0+dfsg1~beta2/typo3/contrib/flashmedia/src/player/audio-player.flp
@@ -0,0 +1,5 @@
+ï»¿<flash_project name="audio-player" version="1">
+    <project_file path="./player.fla" filetype="fla" profile="" def_file="true" />
+    <project_file path="./control.as" filetype="as" />
+    <project_file path="./emff.as" filetype="as" />
+</flash_project>
--- /dev/null
+++ typo3-src-4.5.0+dfsg1~beta2/typo3/contrib/flashmedia/src/player/control.as
@@ -0,0 +1,494 @@
+ï»¿/*
+Plugin Name: Audio player
+Plugin URI: http://www.1pixelout.net/code/audio-player-wordpress-plugin/
+Description: Highly configurable single track mp3 player
+Version: 1.2
+Author: Martin Laine
+Author URI: http://www.1pixelout.net
+
+License:
+
+    Copyright 2005-2006  Martin Laine  (email : martin@1pixelout.net)
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program; if not, write to the Free Software
+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+*/
+
+// ===================================
+// Enhancements to original emff code
+// ===================================
+
+// Set emff object as a global variable (no need to use the _root. syntax)
+_global.emff = emff;
+
+// Create ID3 tag array
+emff.id3Tags = new Array(emff.getSoundNumber());
+
+// Populate array with defaults and setup ID3 loaders
+// Also set the error flag for all sounds
+for(i=0; i < emff.getSoundNumber(); i++) {
+	// Set error flag to false (flag is only set to true if sound doesn't load properly)
+	emff.mySound[i].error = false;
+	// Set reference to index (used in onLoad and onID3 methods)
+	emff.mySound[i].index = i;
+	emff.id3Tags[i].loaded = false;
+	emff.mySound[i].onLoad = function(success) {
+		// Error flag is set to true when sound doesn't load properly
+		this.error = !success;
+	};
+	emff.mySound[i].onID3 = function() {
+		emff.id3Tags[this.index] = new Object();
+		emff.id3Tags[this.index].data = new Array();
+		emff.id3Tags[this.index].data[0] = this.id3.artist;
+		emff.id3Tags[this.index].data[1] = this.id3.songname;
+		// Set flag to indicate that ID3 tags are loaded
+		emff.id3Tags[this.index].loaded = true;
+	};
+}
+
+// Song info retriever method
+emff.getSongInfo = function() {
+	return emff.id3Tags[emff.index];
+}
+
+// Error flag retreiver
+emff.getError = function() {
+	return emff.mySound[emff.index].error;
+}
+
+// Some shortcut methods (that really should be part of the emff code base)
+
+emff.getPosition = function() {
+	return emff.mySound[emff.index].position;
+}
+
+emff.getDuration = function() {
+	return emff.mySound[emff.index].duration;
+}
+
+// ===================================
+// Player object
+// ===================================
+
+_global.player = new Object();
+
+player.maxVolume = 100;
+player.volume = player.maxVolume;
+player.fadeOut = false;
+player.buffering = true;
+player.setcolors = false;
+
+// Player statuses
+player.CLOSED = 0;
+player.OPENING = 1;
+player.OPEN = 2;
+player.CLOSING = 3;
+
+// Initial player status
+player.status = player.CLOSED;
+
+player.close = function() {
+	if( player.status != player.OPEN ) return;
+	player.status = player.CLOSING;
+	player.fadeOut = true;
+	closePlayer = false;
+	_root.speaker_mc.gotoAndStop("off");
+	_root.play();
+}
+
+player.open = function() {
+	if( player.status != player.CLOSED ) return;
+	player.status = player.OPENING;
+	_root.play();
+	// attempt to stop all other instances
+	if( playerID != undefined ) getURL("javascript:ap_stopAll(" + playerID + ")");
+}
+
+// ===================================
+// User interface
+// ===================================
+
+// Only one mc for play and pause functions: action is determined to player status
+_root.control_mc.onRelease = function() {
+	switch(player.status) {
+		case player.CLOSED:
+			// Open player when closed
+			player.open();
+			break;
+		case player.OPEN:
+			// Open player when open
+			player.close();
+			break;
+	}
+}
+
+// Control hover state of control button
+_root.control_mc.hover = false;
+_root.control_mc.state = "play";
+_root.control_mc.onRollOver = function() { _root.control_mc.hover = true; }
+_root.control_mc.onRollOut = function() { _root.control_mc.hover = false; }
+_root.control_mc.onEnterFrame = function() {
+	if(this.state == "play") {
+		this.pause_icon_mc._visible = this.pause_hover_icon_mc._visible = false;
+		this.play_icon_mc._visible = !this.hover;
+		this.play_hover_icon_mc._visible = this.hover;
+	} else {
+		this.play_icon_mc._visible = this.play_hover_icon_mc._visible = false;
+		this.pause_icon_mc._visible = !this.hover;
+		this.pause_hover_icon_mc._visible = this.hover;
+	}
+	this.btn_hover_background_mc._visible = this.hover;
+	this.btn_background_mc._visible = !this.hover;
+}
+
+// Track slider control
+_root.progress_mc.progress_button_mc.onPress = function() {
+	// Pause player
+	emff.ctrlPause();
+	// Set the maximum drag position to the current loaded time
+	var maxDrag = Math.floor(( 186 * emff.getLoaded() ) - 3);
+	// Start dragging the slider
+	startDrag( this, false, -3, -2, maxDrag, -2 );
+	emff.dragpos = true;
+	updateAfterEvent();
+}
+_root.progress_mc.progress_button_mc.onRelease = _root.progress_mc.progress_button_mc.onReleaseOutside = function() {
+	// Stop the slider drag
+	stopDrag();
+	// Slider position as a ratio
+	var selected = ( this._x + 3 ) / 186;
+	// ms loaded so far
+	var loaded = emff.getLoaded();
+	// If selected position is not loaded yet, set it to maximum
+	if(selected > loaded) selected = loaded;
+	// Change track position
+	emff.playedmsec = Math.round((1 / loaded) * emff.getDuration() * selected);
+	// Start playing again
+	emff.ctrlPlay();
+	emff.dragpos = false;
+}
+
+// ===================================
+// Scrolling song information
+// ===================================
+
+// Note: the cycle is handled by the text mask in the songInfo movie clip (last frame calls nextField method)
+
+_root.songInfo_mc.started = false;
+_root.songInfo_mc.index = -1;
+_root.songInfo_mc.pause = true;
+_root.songInfo_mc.pauseLength = 60;
+_root.songInfo_mc.scrollStep = 1;
+_root.songInfo_mc.pauseCounter = 0;
+
+_root.songInfo_mc.useHandCursor = false;
+_root.songInfo_mc.onRelease = function() {
+	this.textMask_mc.gotoAndPlay("next");
+}
+
+_root.songInfo_mc.nextField = function(newIndex) {
+	// Do nothing if the movie hasn't been started yet (when the ID3 tags load)
+	if(!this.started) this.started = true;
+	
+	// Get next index
+	if( newIndex != undefined ) this.index = newIndex;
+	else {
+		if( this.index == ( emff.getSongInfo().data.length - 1 ) ) this.index = 0;
+		else this.index++;
+	}
+	
+	// Set text and reset flags
+	this.input_txt.text = emff.getSongInfo().data[this.index];
+	this.input_txt.hscroll = 0;
+	this.pause = true;
+	this.forward = true;
+	this.pauseCounter = 0;
+
+	// Start the cycle
+	this.textMask_mc.gotoAndPlay("start");
+}
+
+// Scroll loop
+_root.songInfo_mc.onEnterFrame = function() {
+	// Remove the background (this needs doing all the time otherwise it shows)
+	this.input_txt.background = false;
+
+	// Do nothing if text fits in the box
+	if( this.input_txt.length == 0 || this.input_txt.maxhscroll == 0 ) return;
+	
+	// If scrolling is paused, wait
+	if(this.pause) {
+		if(this.pauseCounter == this.pauseLength) {
+			this.pause = false;
+			this.pauseCounter = 0;
+		} else {
+			this.pauseCounter++;
+			return;
+		}
+	}
+
+	if( this.forward ) {
+		// We are going forward
+		this.input_txt.hscroll += this.scrollStep;
+
+		// If we reached the end, pause scrolling and change direction
+		if( this.input_txt.hscroll >= this.input_txt.maxhscroll ) {
+			this.forward = false;
+			this.pause = true;
+			return;
+		}
+	} else {
+		// We are going backward
+		this.input_txt.hscroll -= this.scrollStep;
+
+		// We are back to the beginning so pause scrolling and change direction
+		if( this.input_txt.hscroll == 0 ) {
+			this.pause = true;
+			this.forward = true;
+			return;
+		}
+	}
+}
+
+// ===================================
+// Control loop
+// ===================================
+
+// These 2 variables are used for detecting buffering time
+lastPosition = 0;
+frameCount = 0;
+trackIndex = 0;
+
+_root.onEnterFrame = function() {
+	if(setcolors) {
+		player.setColors();
+		setcolors = false;
+	}
+	
+	if(closePlayer) player.close();
+	
+	// Set the player error flag if there was an error loading the file or if there are no files to load
+	if(emff.getSoundNumber() == 0) player.error = true;
+	else player.error = emff.getError();
+
+	// Handle errors
+	if(player.error) {
+		_root.progress_mc.progress_button_mc._visible = false;
+		// Swicth speaker off
+		_root.speaker_mc.gotoAndStop("off");
+		_root.messages_txt.text = "Error opening file";
+		_root.messages_txt._visible = ( player.status == player.OPEN );
+		_root.position_txt._visible = false;
+		_root.songInfo_mc._visible = false;
+		return;
+	}
+
+	// Ensure time is showing
+	_root.position_txt._visible = true;
+
+	// Handle player fade out
+	if(player.fadeOut) {
+		player.volume -= 8;
+		if( player.volume < 10 ) {
+			emff.ctrlPause();
+			player.fadeOut = false;
+		}
+	}
+	else if(player.status == player.OPEN) player.volume = player.maxVolume;
+	// Set volume in emff player
+	emff.setVolume(player.volume);
+
+	// Update loading bar
+	_root.progress_mc.loading_mc._width = Math.round(emff.getLoaded() * 200);
+
+	if(player.buffering) {
+		// Show buffering message
+		_root.messages_txt.text = "Buffering...";
+		_root.messages_txt._visible = true;
+		_root.songInfo_mc._visible = false;
+	} else {
+		// Hide any messages
+		_root.messages_txt._visible = false;
+		
+		with(_root.songInfo_mc) {
+			// Handle ID3 tag display
+			if( _global.emff.getSongInfo().loaded ) {
+				if( _root.trackIndex != emff.index ) {
+					_root.trackIndex = emff.index;
+					nextField(0);
+				} else if(!started) nextField();
+				_visible = true;
+			} else {
+				_visible = false;
+			}
+		}
+	}
+
+	switch(emff.status) {
+		case emff.PLAYING:
+			// Track is playing
+			
+			// Detect buffering by comparing position every 5 frames
+			frameCount++;
+			if( frameCount == 5 ) {
+				frameCount = 0;
+				player.buffering = ( emff.getPosition() == lastPosition );
+				lastPosition = emff.getPosition();
+			}
+			
+			// Show progress bar slider
+			_root.progress_mc.progress_button_mc._visible = true;
+			// Update slider position if it isn't being dragged
+			if( !emff.dragpos ) _root.progress_mc.progress_button_mc._x = Math.round(( emff.getPlayed() * 186 ) - 3);
+			// Update time
+			_root.position_txt.text = millisecondsToString(emff.getPosition());
+			// Show pause button
+			_root.control_mc.state = "pause";
+		break;
+		
+		case emff.PAUSED:
+			// Track is paused
+		
+			// Update time
+			_root.position_txt.text = millisecondsToString(emff.getPosition());
+			// If slider isn't being dragged, show play button
+			if(!emff.dragpos) _root.control_mc.state = "play";
+		break;
+		
+		case emff.STOPPED:
+			// Track is stopped
+
+			// Re-intialise last position
+			lastPosition = 0;
+			// Hide slider
+			_root.progress_mc.progress_button_mc._visible = false;
+			// Set time to 0
+			_root.position_txt.text = millisecondsToString(0);
+			// Reset slider
+			_root.progress_mc.progress_button_mc._x = -3;
+			// Show play button
+			_root.control_mc.state = "play";
+			// Close player
+			player.close();
+		break;
+	}
+
+	// Hide all text if the player is not open
+	if( player.status != player.OPEN ) {
+		_root.messages_txt._visible = false;
+		_root.songInfo_mc._visible = false;
+		_root.position_txt._visible = false;
+	}
+}
+
+// Set colors method
+
+player.setColors = function() {
+	var colorObject;
+
+	// Populate colors object
+	var colors = new Object();
+	colors.bg = bg;
+	colors.leftbg = leftbg;
+	colors.lefticon = lefticon;
+	colors.rightbg = rightbg;
+	colors.rightbghover = rightbghover;
+	colors.righticon = righticon;
+	colors.righticonhover = righticonhover;
+	colors.text = text;
+	colors.slider = slider;
+	colors.track = track;
+	colors.loader = loader;
+	colors.border = border;
+
+	if( colors.bg != undefined ) {
+		colorObject = new Color(background_mc);
+		colorObject.setRGB(colors.bg);
+		colorObject = new Color(songInfo_mc.textmask_mc);
+		colorObject.setRGB(colors.bg);
+	}
+	if( colors.leftbg != undefined ) {
+		colorObject = new Color(left_background_mc);
+		colorObject.setRGB(colors.leftbg);
+	}
+	if( colors.lefticon != undefined ) {
+		colorObject = new Color(speaker_mc);
+		colorObject.setRGB(colors.lefticon);
+	}
+	if( colors.rightbg != undefined ) {
+		colorObject = new Color(control_mc.btn_background_mc);
+		colorObject.setRGB(colors.rightbg);
+	}
+	if( colors.rightbghover != undefined ) {
+		colorObject = new Color(control_mc.btn_hover_background_mc);
+		colorObject.setRGB(colors.rightbghover);
+	}
+	if( colors.righticon != undefined ) {
+		colorObject = new Color(control_mc.play_icon_mc);
+		colorObject.setRGB(colors.righticon);
+		colorObject = new Color(control_mc.pause_icon_mc);
+		colorObject.setRGB(colors.righticon);
+	}
+	if( colors.righticonhover != undefined ) {
+		colorObject = new Color(control_mc.play_hover_icon_mc);
+		colorObject.setRGB(colors.righticonhover);
+		colorObject = new Color(control_mc.pause_hover_icon_mc);
+		colorObject.setRGB(colors.righticonhover);
+	}
+
+	if( colors.text != undefined ) {
+		messages_txt.textColor = position_txt.textColor = songInfo_mc.input_txt.textColor = colors.text;
+	}
+	
+	if( colors.slider != undefined ) {
+		colorObject = new Color(progress_mc.progress_button_mc);
+		colorObject.setRGB(colors.slider);
+	}
+	if( colors.track != undefined ) {
+		colorObject = new Color(progress_mc.track_mc);
+		colorObject.setRGB(colors.track);
+	}
+	if( colors.loader != undefined ) {
+		colorObject = new Color(progress_mc.loader_mc);
+		colorObject.setRGB(colors.loader);
+	}
+	if( colors.border != undefined ) {
+		colorObject = new Color(progress_mc.border_mc);
+		colorObject.setRGB(colors.border);
+	}
+}
+
+// Helper function: converts milliseconds to a string (HH:MM:SS)
+
+function millisecondsToString(position) {
+	var trkTimeInfo = new Date();
+	var seconds, minutes, hours;
+
+	// Populate a date object (to convert from ms to hours/minutes/seconds)
+	trkTimeInfo.setSeconds(int(position/1000));
+	trkTimeInfo.setMinutes(int((position/1000)/60));
+	trkTimeInfo.setHours(int(((position/1000)/60)/60));
+
+	// Get the values from date object
+	seconds = trkTimeInfo.getSeconds();
+	minutes = trkTimeInfo.getMinutes();
+	hours = trkTimeInfo.getHours();
+
+	// Build position string
+	if(seconds < 10) seconds = "0" + seconds.toString();
+	if(minutes < 10) minutes = "0" + minutes.toString();
+	if(hours < 10) hours = "0" + hours.toString();
+
+	return hours + ":" + minutes + ":" + seconds;
+}
--- /dev/null
+++ typo3-src-4.5.0+dfsg1~beta2/typo3/contrib/flashmedia/src/player/emff.as
@@ -0,0 +1,230 @@
+// EMFF (Easy Musikplayer For Flash)
+// author: Marc Reichelt (http://www.marcreichelt.de/)
+// This flashfilm is under the General Public License (GPL), more informations at:
+// http://www.gnu.org/copyleft/gpl.html
+// or in the file gpl.txt
+
+
+emff                 = new Object();				// new objekt "emff"
+emff.mySound         = new Array();				// new Array of sound objects
+
+emff.playedmsec      = 0;					// played milliseconds of actual title
+emff.index           = 0;					// index of the actual selected title
+emff.status          = 0;					// status of player
+emff.dragpos         = false;					// is the user dragging the position?
+emff.dragvol         = false;					// is he dragging the volume?
+
+emff.STOPPED         = 0;					// some constants for status
+emff.PLAYING         = 1;
+emff.PAUSED          = 2;
+
+emff.loop            = false;					// now the default values
+emff.autostart       = false;
+emff.streaming       = true;
+emff.src             = src.split(",");
+emff.isLoaded        = new Array();
+
+emff.getSoundNumber = function()
+{
+ return emff.src.length;
+}
+
+for(i=0; i < emff.getSoundNumber(); i++)
+{
+ emff.isLoaded.push(false);
+ emff.mySound.push(new Sound());
+}
+
+
+
+emff.setVolume = function(vol)
+{
+ if(vol < 0)  { vol=0;   }
+ if(vol > 100){ vol=100; }
+
+ for(i=0; i < emff.getSoundNumber(); i++)
+ {
+  emff.mySound[i].setVolume(vol);
+ }
+};
+
+emff.setVolume(100);
+
+
+
+emff.loadSelectedSound = function()
+{
+ emff.mySound[emff.index].loadSound(emff.src[emff.index], emff.streaming);
+ emff.isLoaded[emff.index] = true;
+};
+
+
+
+emff.ctrlBegin = function()
+{
+ if(emff.status != emff.STOPPED)
+ {
+  emff.mySound[emff.index].stop();
+ }
+
+ emff.index = 0;
+
+ if(!emff.isLoaded[emff.index]){ emff.loadSelectedSound(); }
+ emff.mySound[emff.index].start();
+ emff.status = emff.PLAYING;
+};
+
+
+
+emff.ctrlStop = function()
+{
+ if(emff.status != emff.STOPPED)
+ {
+  emff.mySound[emff.index].stop();
+  emff.status = emff.STOPPED;
+ }
+};
+
+
+
+emff.ctrlPause = function()
+{
+ if(emff.status == emff.PLAYING)
+ {
+  emff.playedmsec = emff.mySound[emff.index].position;
+  emff.mySound[emff.index].stop();
+  emff.status = emff.PAUSED;
+ }
+};
+
+
+
+emff.ctrlPlay = function()
+{
+ if(emff.status == emff.STOPPED)
+ {
+  if(!emff.isLoaded[emff.index]) { emff.loadSelectedSound(); }
+  emff.mySound[emff.index].start();
+  emff.status = emff.PLAYING;
+ }
+
+ if(emff.status == emff.PAUSED)
+ {
+  emff.mySound[emff.index].start(Math.round(emff.playedmsec / 1000));
+  emff.status = emff.PLAYING;
+ }
+};
+
+
+
+emff.ctrlPrevious = function()
+{
+ emff.mySound[emff.index].stop();
+
+ if(emff.index <= 0)
+ {
+  emff.index = emff.getSoundNumber() - 1;
+ } else
+ {
+  emff.index -= 1;
+ }
+
+ if(emff.status != emff.STOPPED)
+ {
+  if(!emff.isLoaded[emff.index]){ emff.loadSelectedSound(); }
+  emff.mySound[emff.index].start();
+  emff.status = emff.PLAYING;
+ }
+};
+
+
+
+emff.ctrlNext = function()
+{
+ emff.mySound[emff.index].stop();
+
+ if(emff.index >= emff.getSoundNumber() - 1)
+ {
+  emff.index = 0;
+ } else
+ {
+  emff.index += 1;
+ }
+
+ if(emff.status != emff.STOPPED)
+ {
+  if(!emff.isLoaded[emff.index]){ emff.loadSelectedSound(); }
+  emff.mySound[emff.index].start();
+  emff.status = emff.PLAYING;
+ }
+};
+
+
+
+for(i=0; i < emff.getSoundNumber(); i++)
+{
+ emff.mySound[i].onSoundComplete = function()
+ {
+  emff.mySound[emff.index].stop();
+
+  if(emff.index < emff.getSoundNumber() - 1)
+  {
+   emff.ctrlNext();
+  } else
+  {
+   if(emff.loop)
+   {
+    emff.ctrlNext();
+   } else
+   {
+    emff.index  = 0;
+    emff.status = emff.STOPPED;
+   }
+  }
+ };
+}
+
+
+
+emff.getLoaded = function()
+{
+ if(!emff.isLoaded[emff.index]){ return 0; }
+ return emff.mySound[emff.index].getBytesLoaded() / emff.mySound[emff.index].getBytesTotal();
+};
+
+
+
+emff.getPlayed = function()
+{
+ if(emff.status == emff.STOPPED)
+ {
+  return 0;
+ }
+
+ if(emff.status == emff.PLAYING)
+ {
+  loaded     = emff.mySound[emff.index].getBytesLoaded() / emff.mySound[emff.index].getBytesTotal();
+  playedmsec = emff.mySound[emff.index].position;
+  totalmsec  = 1 / loaded * emff.mySound[emff.index].duration;
+  return playedmsec / totalmsec;
+ }
+
+ if(emff.status == emff.PAUSED)
+ {
+  loaded     = emff.mySound[emff.index].getBytesLoaded() / emff.mySound[emff.index].getBytesTotal();
+  playedmsec = emff.playedmsec;
+  totalmsec  = 1 / loaded * emff.mySound[emff.index].duration;
+  return playedmsec / totalmsec;
+ }
+
+ return 0;
+};
+
+
+
+// now taking over some options
+if(autostart == "yes"){ emff.autostart = true;  }
+if(loop      == "yes"){ emff.loop      = true;  }
+if(streaming == "no") { emff.streaming = false; }
+
+
